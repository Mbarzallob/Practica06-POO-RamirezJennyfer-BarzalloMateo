/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/MDIApplication.java to edit this template
 */
package ec.edu.ups.practica06.ramirezjennyfer.barzallomateo.vista;

import ec.edu.ups.practica06.ramirezjennyfer.barzallomateo.controlador.ControladorArchivo;
import java.io.File;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author SOPORTETICS
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private ControladorArchivo controladorArchivo;

    /**
     * Creates new form VentanaPrincipalo
     */
    public VentanaPrincipal() {
        initComponents();
        controladorArchivo = new ControladorArchivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treePruebas = new javax.swing.JTree();
        btnTodo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        txtTamano = new javax.swing.JTextField();
        txtPermisosLectura = new javax.swing.JTextField();
        txtPermisosEscritura = new javax.swing.JTextField();
        txtUltimaModificacion = new javax.swing.JTextField();
        btnListarDirectorios = new javax.swing.JButton();
        btnListarArchivos = new javax.swing.JButton();
        btnListarArchivosOcultos = new javax.swing.JButton();
        btnListarDirectoriosOcultos = new javax.swing.JButton();
        btnMostrarInformacion = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuItemCrear = new javax.swing.JMenuItem();
        menuItemEliminar = new javax.swing.JMenuItem();
        menuItemRenombrar = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(238, 209, 200));

        treePruebas.setBackground(new java.awt.Color(185, 186, 190));
        treePruebas.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Archivos");
        treePruebas.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(treePruebas);

        btnTodo.setBackground(new java.awt.Color(227, 158, 104));
        btnTodo.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnTodo.setForeground(new java.awt.Color(255, 255, 255));
        btnTodo.setText("Buscar todos");
        btnTodo.setBorderPainted(false);
        btnTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setText("Ruta");

        txtRuta.setBorder(null);

        jPanel2.setBackground(new java.awt.Color(247, 234, 231));

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel2.setText("Informacion");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("Path absoluto:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("Tama√±o del archivo:");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Permisos de lectura:");

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel6.setText("Permisos de escritura:");

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel7.setText("Fecha ultima modificacion:");

        txtPath.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtPath.setBorder(null);
        txtPath.setEnabled(false);

        txtTamano.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtTamano.setBorder(null);
        txtTamano.setEnabled(false);

        txtPermisosLectura.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtPermisosLectura.setBorder(null);
        txtPermisosLectura.setEnabled(false);

        txtPermisosEscritura.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtPermisosEscritura.setBorder(null);
        txtPermisosEscritura.setEnabled(false);

        txtUltimaModificacion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtUltimaModificacion.setBorder(null);
        txtUltimaModificacion.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTamano)
                    .addComponent(txtPermisosLectura)
                    .addComponent(txtPath)
                    .addComponent(txtPermisosEscritura)
                    .addComponent(txtUltimaModificacion))
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTamano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPermisosLectura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(txtPermisosEscritura, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUltimaModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtPath, txtPermisosEscritura, txtPermisosLectura, txtTamano, txtUltimaModificacion});

        btnListarDirectorios.setBackground(new java.awt.Color(227, 158, 104));
        btnListarDirectorios.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnListarDirectorios.setForeground(new java.awt.Color(255, 255, 255));
        btnListarDirectorios.setText("Listar directorios");
        btnListarDirectorios.setBorderPainted(false);
        btnListarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosActionPerformed(evt);
            }
        });

        btnListarArchivos.setBackground(new java.awt.Color(227, 158, 104));
        btnListarArchivos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnListarArchivos.setForeground(new java.awt.Color(255, 255, 255));
        btnListarArchivos.setText("Listar archivos");
        btnListarArchivos.setBorderPainted(false);
        btnListarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosActionPerformed(evt);
            }
        });

        btnListarArchivosOcultos.setBackground(new java.awt.Color(227, 158, 104));
        btnListarArchivosOcultos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnListarArchivosOcultos.setForeground(new java.awt.Color(255, 255, 255));
        btnListarArchivosOcultos.setText("Listar archivos ocultos");
        btnListarArchivosOcultos.setBorderPainted(false);
        btnListarArchivosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosOcultosActionPerformed(evt);
            }
        });

        btnListarDirectoriosOcultos.setBackground(new java.awt.Color(227, 158, 104));
        btnListarDirectoriosOcultos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnListarDirectoriosOcultos.setForeground(new java.awt.Color(255, 255, 255));
        btnListarDirectoriosOcultos.setText("Listar directorios ocultos");
        btnListarDirectoriosOcultos.setBorderPainted(false);
        btnListarDirectoriosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosOcultosActionPerformed(evt);
            }
        });

        btnMostrarInformacion.setBackground(new java.awt.Color(227, 158, 104));
        btnMostrarInformacion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnMostrarInformacion.setForeground(new java.awt.Color(255, 255, 255));
        btnMostrarInformacion.setText("Mostrar informacion");
        btnMostrarInformacion.setBorderPainted(false);
        btnMostrarInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarInformacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMostrarInformacion)
                            .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnTodo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnListarDirectorios)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnListarArchivos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnListarDirectoriosOcultos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnListarArchivosOcultos)))
                        .addGap(0, 230, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTodo)
                    .addComponent(btnListarDirectorios)
                    .addComponent(btnListarArchivos)
                    .addComponent(btnListarArchivosOcultos)
                    .addComponent(btnListarDirectoriosOcultos))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrarInformacion)
                .addGap(13, 13, 13))
        );

        menuBar.setBackground(new java.awt.Color(139, 138, 143));

        fileMenu.setBackground(new java.awt.Color(139, 138, 143));
        fileMenu.setBorder(null);
        fileMenu.setMnemonic('f');
        fileMenu.setText("Gestionar directorio");
        fileMenu.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        menuItemCrear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemCrear.setBackground(new java.awt.Color(139, 138, 143));
        menuItemCrear.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        menuItemCrear.setMnemonic('o');
        menuItemCrear.setText("Crear");
        menuItemCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCrearActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemCrear);

        menuItemEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemEliminar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        menuItemEliminar.setMnemonic('s');
        menuItemEliminar.setText("Eliminar");
        menuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEliminarActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemEliminar);

        menuItemRenombrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemRenombrar.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        menuItemRenombrar.setMnemonic('a');
        menuItemRenombrar.setText("Renombrar");
        menuItemRenombrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRenombrarActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemRenombrar);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        exitMenuItem.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void btnTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodoActionPerformed

        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String url = txtRuta.getText();
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                treePruebas.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 0);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_btnTodoActionPerformed

    private void btnListarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosActionPerformed
        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String url = txtRuta.getText();
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                treePruebas.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 1);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_btnListarDirectoriosActionPerformed

    private void btnListarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosActionPerformed
        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String url = txtRuta.getText();
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                treePruebas.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 2);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_btnListarArchivosActionPerformed

    private void btnListarArchivosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosOcultosActionPerformed
        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String url = txtRuta.getText();
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                treePruebas.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 4);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_btnListarArchivosOcultosActionPerformed

    private void btnListarDirectoriosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosOcultosActionPerformed
        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String url = txtRuta.getText();
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                treePruebas.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 3);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_btnListarDirectoriosOcultosActionPerformed

    private void btnMostrarInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarInformacionActionPerformed
        if (treePruebas.getLastSelectedPathComponent() == null) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningun archivo");
        } else {
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) treePruebas.getLastSelectedPathComponent();

            TreeNode[] si = nodoSeleccionado.getPath();
            String path = "";
            for (TreeNode treeNode : si) {
                path = path + "/" + treeNode;
            }
            String pathF = path.substring(1);

            File archivo = new File(pathF);
            txtPath.setText(archivo.getAbsolutePath());
            txtTamano.setText(formatearTama√±oArchivo(archivo.length()));
            if (archivo.canRead()) {
                txtPermisosLectura.setText("Puede leer");
            } else {
                txtPermisosLectura.setText("No puede leer");
            }
            if (archivo.canWrite()) {
                txtPermisosEscritura.setText("Puede escribir");
            } else {
                txtPermisosEscritura.setText("No puede escribir");
            }
            Date yourDate = new Date(archivo.lastModified());
            DateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            String formattedDate = formatter.format(yourDate);
            txtUltimaModificacion.setText(formattedDate);
        }
    }//GEN-LAST:event_btnMostrarInformacionActionPerformed

    private void menuItemCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCrearActionPerformed
        if (txtRuta.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String nombre = JOptionPane.showInputDialog("Ingrese el nombre del archivo a crear");
                String url = txtRuta.getText();
                controladorArchivo.crearArchivo(url, nombre);
                btnTodoActionPerformed(evt);
                JOptionPane.showMessageDialog(this, "Se ha creado el archivo con el nombre: "+nombre);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_menuItemCrearActionPerformed

    private void menuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEliminarActionPerformed
        if (treePruebas.getLastSelectedPathComponent() == null) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningun archivo");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) treePruebas.getLastSelectedPathComponent();
                TreeNode[] si = nodoSeleccionado.getPath();
                String path = "";
                for (TreeNode treeNode : si) {
                    path = path + "/" + treeNode;
                }
                String pathF = path.substring(1);
                controladorArchivo.eliminarArchivo(pathF);
                JOptionPane.showMessageDialog(this, "Se ha eliminado el archivo");
                btnTodoActionPerformed(evt);

            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }
        }
    }//GEN-LAST:event_menuItemEliminarActionPerformed

    private void menuItemRenombrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRenombrarActionPerformed
        if (treePruebas.getLastSelectedPathComponent() == null) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningun archivo");
        } else {
            File archivo = new File(txtRuta.getText());
            if (archivo.exists()) {
                String nombre = JOptionPane.showInputDialog("Ingrese el nombre a renombrar");
                DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) treePruebas.getLastSelectedPathComponent();
                TreeNode[] si = nodoSeleccionado.getPath();
                String path = "";
                String pathRen = "";
                for (TreeNode treeNode : si) {
                    path = path + "/" + treeNode;
                }
                for (int i = 0; i < si.length - 1; i++) {
                    pathRen = pathRen + "/" + si[i];
                }
                String pathRenF = pathRen.substring(1);
                String pathF = path.substring(1);
                controladorArchivo.renombrarArchivo(pathRenF, pathF, nombre);
                btnTodoActionPerformed(evt);
                JOptionPane.showConfirmDialog(this, "Se ha renombrado el archivo a: "+nombre);

            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }

        }
    }//GEN-LAST:event_menuItemRenombrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    private void agregarCarpetasYArchivos(String ruta, DefaultMutableTreeNode nodoPadre, int opcion) {
        File archivo = new File(ruta);
        File[] elementos = archivo.listFiles();
        if (elementos != null) {
            for (File elemento : elementos) {
                if (opcion == 0) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);

                    if (elemento.isDirectory()) {
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 0);
                    }
                } else if (opcion == 1) {

                    if (elemento.isDirectory()) {
                        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                        nodoPadre.add(nodo);
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 1);
                    }
                } else if (opcion == 2) {
                    if (elemento.isFile()) {
                        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                        nodoPadre.add(nodo);
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 2);
                    }
                } else if (opcion == 3) {
                    if (elemento.isDirectory() && elemento.isHidden()) {

                        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                        nodoPadre.add(nodo);
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 3);
                    }
                } else if (opcion == 4) {
                    if (elemento.isFile() && elemento.isHidden()) {

                        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                        nodoPadre.add(nodo);
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 4);
                    }
                }
            }
        }
    }

    public String formatearTama√±oArchivo(long tama√±oEnBytes) {
        if (tama√±oEnBytes < 1024) {
            return tama√±oEnBytes + " bytes";
        } else if (tama√±oEnBytes < 1024 * 1024) {
            double tama√±oEnKB = tama√±oEnBytes / 1024.0;
            return formatearDecimal(tama√±oEnKB) + " KB";
        } else if (tama√±oEnBytes < 1024 * 1024 * 1024) {
            double tama√±oEnMB = tama√±oEnBytes / (1024.0 * 1024);
            return formatearDecimal(tama√±oEnMB) + " MB";
        } else {
            double tama√±oEnGB = tama√±oEnBytes / (1024.0 * 1024 * 1024);
            return formatearDecimal(tama√±oEnGB) + " GB";
        }

    }

    public String formatearDecimal(double n√∫mero) {
        DecimalFormat formato = new DecimalFormat("#.##");
        return formato.format(n√∫mero);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListarArchivos;
    private javax.swing.JButton btnListarArchivosOcultos;
    private javax.swing.JButton btnListarDirectorios;
    private javax.swing.JButton btnListarDirectoriosOcultos;
    private javax.swing.JButton btnMostrarInformacion;
    private javax.swing.JButton btnTodo;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemCrear;
    private javax.swing.JMenuItem menuItemEliminar;
    private javax.swing.JMenuItem menuItemRenombrar;
    private javax.swing.JTree treePruebas;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtPermisosEscritura;
    private javax.swing.JTextField txtPermisosLectura;
    private javax.swing.JTextField txtRuta;
    private javax.swing.JTextField txtTamano;
    private javax.swing.JTextField txtUltimaModificacion;
    // End of variables declaration//GEN-END:variables

}
